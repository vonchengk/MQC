using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace MQC.check
{
    public partial class Add : System.Web.UI.Page
    {
        static string getMaktx,getmold;
        double[] limit = new double[2];
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                Detail data;
                data = (Detail)Context.Handler;
                getMaktx = data.Maktx;
                getmold = data.Mold;
            }
        }

        protected void Save_Click(object sender, EventArgs e)
        {
            using(DbAppDataContext db =new DbAppDataContext())
            {
                Check data = new Check();
                data.No = int.Parse(TbNo.Value.ToString());
                data.Type = TbType.Value.ToString();
                data.Content = TbContent.Value.ToString();
                data.Tool = TbTool.Value.ToString();
                data.L_Toler = double.Parse(TbL_Toler.Value.ToString());
                data.U_Toler = double.Parse(TbU_Toler.Value.ToString());
                limit = GetLimitData(TbL_Toler.Value.ToString(), TbL_Limit1.Value.ToString());
                if(limit[0]!=0)
                {
                    data.L_Limit1 = limit[0];
                }
                data.L_Limit2 = limit[1];
                limit = GetLimitData(TbU_Toler.Value.ToString(), TbU_Limit1.Value.ToString());
                if (limit[0] != 0)
                {
                    data.U_Limit1 = limit[0];
                }
                data.U_Limit2 = limit[1];
                data.Maktx = getMaktx;
                data.Mold = getmold;
                data.CreatDate = DateTime.Now;
                db.Check.InsertOnSubmit(data);
                db.SubmitChanges();
            }
        }

        public double[] GetLimitData(string toler,string limit1)
        {
            double[] limit = new double[2];
            if(!String.IsNullOrEmpty(limit1))
            {
                limit[0] = double.Parse(limit1);
                limit[1] = double.Parse(limit1);
            }
            else
            {
                limit[1] = double.Parse(toler);
            }
            return limit;
        }
    }
}