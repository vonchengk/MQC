#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MQC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MQC")]
	public partial class DbAppDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertCavity(Cavity instance);
    partial void UpdateCavity(Cavity instance);
    partial void DeleteCavity(Cavity instance);
    partial void InsertCheck(Check instance);
    partial void UpdateCheck(Check instance);
    partial void DeleteCheck(Check instance);
    #endregion
		
		public DbAppDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MQCConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbAppDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbAppDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbAppDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbAppDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customer
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Product> Product
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Cavity> Cavity
		{
			get
			{
				return this.GetTable<Cavity>();
			}
		}
		
		public System.Data.Linq.Table<Check> Check
		{
			get
			{
				return this.GetTable<Check>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Customer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Maktx;
		
		private string _Matnr;
		
		private string _Customer;
		
		private string _Series;
		
		private string _Standard;
		
		private string _Version;
		
		private int _Del;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaktxChanging(string value);
    partial void OnMaktxChanged();
    partial void OnMatnrChanging(string value);
    partial void OnMatnrChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnSeriesChanging(string value);
    partial void OnSeriesChanged();
    partial void OnStandardChanging(string value);
    partial void OnStandardChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnDelChanging(int value);
    partial void OnDelChanged();
    #endregion
		
		public Product()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maktx", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string Maktx
		{
			get
			{
				return this._Maktx;
			}
			set
			{
				if ((this._Maktx != value))
				{
					this.OnMaktxChanging(value);
					this.SendPropertyChanging();
					this._Maktx = value;
					this.SendPropertyChanged("Maktx");
					this.OnMaktxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Matnr", DbType="NVarChar(50)")]
		public string Matnr
		{
			get
			{
				return this._Matnr;
			}
			set
			{
				if ((this._Matnr != value))
				{
					this.OnMatnrChanging(value);
					this.SendPropertyChanging();
					this._Matnr = value;
					this.SendPropertyChanged("Matnr");
					this.OnMatnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Series", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				if ((this._Series != value))
				{
					this.OnSeriesChanging(value);
					this.SendPropertyChanging();
					this._Series = value;
					this.SendPropertyChanged("Series");
					this.OnSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Standard", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Standard
		{
			get
			{
				return this._Standard;
			}
			set
			{
				if ((this._Standard != value))
				{
					this.OnStandardChanging(value);
					this.SendPropertyChanging();
					this._Standard = value;
					this.SendPropertyChanged("Standard");
					this.OnStandardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del", DbType="Int NOT NULL")]
		public int Del
		{
			get
			{
				return this._Del;
			}
			set
			{
				if ((this._Del != value))
				{
					this.OnDelChanging(value);
					this.SendPropertyChanging();
					this._Del = value;
					this.SendPropertyChanged("Del");
					this.OnDelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cavity")]
	public partial class Cavity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Mold;
		
		private int _Num;
		
		private string _Maktx;
		
		private string _SerialNo;
		
		private string _PS;
		
		private int _Del;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMoldChanging(string value);
    partial void OnMoldChanged();
    partial void OnNumChanging(int value);
    partial void OnNumChanged();
    partial void OnMaktxChanging(string value);
    partial void OnMaktxChanged();
    partial void OnSerialNoChanging(string value);
    partial void OnSerialNoChanged();
    partial void OnPSChanging(string value);
    partial void OnPSChanged();
    partial void OnDelChanging(int value);
    partial void OnDelChanged();
    #endregion
		
		public Cavity()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mold", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Mold
		{
			get
			{
				return this._Mold;
			}
			set
			{
				if ((this._Mold != value))
				{
					this.OnMoldChanging(value);
					this.SendPropertyChanging();
					this._Mold = value;
					this.SendPropertyChanged("Mold");
					this.OnMoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num", DbType="Int NOT NULL")]
		public int Num
		{
			get
			{
				return this._Num;
			}
			set
			{
				if ((this._Num != value))
				{
					this.OnNumChanging(value);
					this.SendPropertyChanging();
					this._Num = value;
					this.SendPropertyChanged("Num");
					this.OnNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Maktx", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Maktx
		{
			get
			{
				return this._Maktx;
			}
			set
			{
				if ((this._Maktx != value))
				{
					this.OnMaktxChanging(value);
					this.SendPropertyChanging();
					this._Maktx = value;
					this.SendPropertyChanged("Maktx");
					this.OnMaktxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNo", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SerialNo
		{
			get
			{
				return this._SerialNo;
			}
			set
			{
				if ((this._SerialNo != value))
				{
					this.OnSerialNoChanging(value);
					this.SendPropertyChanging();
					this._SerialNo = value;
					this.SendPropertyChanged("SerialNo");
					this.OnSerialNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PS", DbType="NVarChar(MAX)")]
		public string PS
		{
			get
			{
				return this._PS;
			}
			set
			{
				if ((this._PS != value))
				{
					this.OnPSChanging(value);
					this.SendPropertyChanging();
					this._PS = value;
					this.SendPropertyChanged("PS");
					this.OnPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del", DbType="Int NOT NULL")]
		public int Del
		{
			get
			{
				return this._Del;
			}
			set
			{
				if ((this._Del != value))
				{
					this.OnDelChanging(value);
					this.SendPropertyChanging();
					this._Del = value;
					this.SendPropertyChanged("Del");
					this.OnDelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Check]")]
	public partial class Check : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _No;
		
		private string _Type;
		
		private string _Tool;
		
		private System.Nullable<double> _L_Toler;
		
		private System.Nullable<double> _U_Toler;
		
		private System.Nullable<double> _L_Limit1;
		
		private System.Nullable<double> _U_Limit1;
		
		private double _L_Limit2;
		
		private double _U_Limit2;
		
		private string _Content;
		
		private int _Del;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnToolChanging(string value);
    partial void OnToolChanged();
    partial void OnL_TolerChanging(System.Nullable<double> value);
    partial void OnL_TolerChanged();
    partial void OnU_TolerChanging(System.Nullable<double> value);
    partial void OnU_TolerChanged();
    partial void OnL_Limit1Changing(System.Nullable<double> value);
    partial void OnL_Limit1Changed();
    partial void OnU_Limit1Changing(System.Nullable<double> value);
    partial void OnU_Limit1Changed();
    partial void OnL_Limit2Changing(double value);
    partial void OnL_Limit2Changed();
    partial void OnU_Limit2Changing(double value);
    partial void OnU_Limit2Changed();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnDelChanging(int value);
    partial void OnDelChanged();
    #endregion
		
		public Check()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL")]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tool", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Tool
		{
			get
			{
				return this._Tool;
			}
			set
			{
				if ((this._Tool != value))
				{
					this.OnToolChanging(value);
					this.SendPropertyChanging();
					this._Tool = value;
					this.SendPropertyChanged("Tool");
					this.OnToolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_L_Toler", DbType="Float")]
		public System.Nullable<double> L_Toler
		{
			get
			{
				return this._L_Toler;
			}
			set
			{
				if ((this._L_Toler != value))
				{
					this.OnL_TolerChanging(value);
					this.SendPropertyChanging();
					this._L_Toler = value;
					this.SendPropertyChanged("L_Toler");
					this.OnL_TolerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Toler", DbType="Float")]
		public System.Nullable<double> U_Toler
		{
			get
			{
				return this._U_Toler;
			}
			set
			{
				if ((this._U_Toler != value))
				{
					this.OnU_TolerChanging(value);
					this.SendPropertyChanging();
					this._U_Toler = value;
					this.SendPropertyChanged("U_Toler");
					this.OnU_TolerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_L_Limit1", DbType="Float")]
		public System.Nullable<double> L_Limit1
		{
			get
			{
				return this._L_Limit1;
			}
			set
			{
				if ((this._L_Limit1 != value))
				{
					this.OnL_Limit1Changing(value);
					this.SendPropertyChanging();
					this._L_Limit1 = value;
					this.SendPropertyChanged("L_Limit1");
					this.OnL_Limit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Limit1", DbType="Float")]
		public System.Nullable<double> U_Limit1
		{
			get
			{
				return this._U_Limit1;
			}
			set
			{
				if ((this._U_Limit1 != value))
				{
					this.OnU_Limit1Changing(value);
					this.SendPropertyChanging();
					this._U_Limit1 = value;
					this.SendPropertyChanged("U_Limit1");
					this.OnU_Limit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_L_Limit2", DbType="Float NOT NULL")]
		public double L_Limit2
		{
			get
			{
				return this._L_Limit2;
			}
			set
			{
				if ((this._L_Limit2 != value))
				{
					this.OnL_Limit2Changing(value);
					this.SendPropertyChanging();
					this._L_Limit2 = value;
					this.SendPropertyChanged("L_Limit2");
					this.OnL_Limit2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Limit2", DbType="Float NOT NULL")]
		public double U_Limit2
		{
			get
			{
				return this._U_Limit2;
			}
			set
			{
				if ((this._U_Limit2 != value))
				{
					this.OnU_Limit2Changing(value);
					this.SendPropertyChanging();
					this._U_Limit2 = value;
					this.SendPropertyChanged("U_Limit2");
					this.OnU_Limit2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del", DbType="Int NOT NULL")]
		public int Del
		{
			get
			{
				return this._Del;
			}
			set
			{
				if ((this._Del != value))
				{
					this.OnDelChanging(value);
					this.SendPropertyChanging();
					this._Del = value;
					this.SendPropertyChanged("Del");
					this.OnDelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
